Mahmoud Hafez (mhafez)
report.txt
Lab2: Lab Report (text formate) for Part 3


Lab Report: Graph.c

Introduction:
The final part of the assignment involved writing a C program (graph.c) to generate a simple plot of the mathematical function y = sin(x) + cos(2x) over the range of [-4π, 4π]. This report outlines the user experience, the internal workings of the program, and the verification process to ensure the output's correctness.

User Experience:
Users interact with the program through a terminal. Upon execution, the program announces its purpose by stating it will plot the specified function over the given range. As it runs, it prints lines representing different x values within the range. Each line includes the x value, the corresponding y value (calculated from the function), and a visual representation of the y value in the form of a bar made of '#' characters. The length of the bar is proportional to the y value, providing a visual sense of the function's amplitude at each point. After iterating through the range, the program reports the locations (x values) of the maximum and minimum y values observed, along with the y values at those points. 

However the program does not have a high customization for the user to choose the fuction or even the range or domain (But that was the requirments of the program in the Lab)

Internal Workings:
1. Initialization: The program defines constants for π, the range of x values (minX to maxX), and the step size for incrementing x. It also initializes variables to track the maximum and minimum y values and their corresponding x values.
2. Looping Through the Range: The program uses a for loop to iterate over the range from minX to maxX, incrementing by a defined step size on each iteration. For each x value, it calculates the y value using the sin(x) + cos(2x) formula.
3. Plotting: For each iteration, the program prints the current x and y values. It then generates a bar of '#' characters, the length of which is based on a scaled and shifted version of the y value, to fit the plot within the terminal window comfortably.
4. Finding Maxima and Minima: As it calculates y values, the program checks whether the current y is the maximum or minimum observed so far and updates the tracking variables accordingly.
5. Reporting: After completing the iterations, the program prints the maximum and minimum y values, along with their corresponding x values.

Verification:
To verify the correctness of the program's output, several steps were taken:
1. Theoretical Comparison: The function's behavior was analyzed mathematically to understand its expected maxima and minima within the given range. This theoretical understanding provided a baseline for what the program should output.
2. Visual Inspection: The ASCII plot generated by the program was visually inspected to ensure it matched expectations based on the function's known properties. The periodic nature of sin and cos functions, combined with their phases and amplitudes, makes the pattern of the output predictable.
3. Numerical Validation: Specific points (such as x = 0, π/2, π, etc.) were calculated manually to verify the accuracy of the program's calculations.
4. Maximum and Minimum Validation: The reported maximum and minimum values and their locations were cross-referenced with expected values derived from the function's mathematical properties.

Conclusion:
The graph.c program successfully plots the function y = sin(x) + cos(2x) over the specified range, providing both a visual representation and analytical data about the function's behavior. Through a combination of theoretical knowledge, visual inspection, and numerical validation, the correctness of the program's output was verified.

